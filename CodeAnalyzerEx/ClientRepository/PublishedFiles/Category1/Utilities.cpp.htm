<html>
<head>
<link rel="stylesheet" type="text/css" href="..\CSSfiles\CSSstart.css">
<script src="..\JavaScript\JSFile.js">
</script>
</head>
<body>
<pre>
 !----------------------------------------------------------------------------
Utilities.cpp.htm - Help file for Project #3
Published 19 Mar 2017
Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017


Note:
-Markup characters in the text part, enclosed in &lt;pre&gt;...&lt;/pre&gt; have to be
replaced with escape sequences, e.g., < becomes &lt and > becomes &gt
-Be careful that you don't replace genuine markup characters with escape
sequences, e.g., everything outside of the &lt;pre&gt;...&lt;/pre&gt; section.
----------------------------------------------------------------------------->
 </pre>
<h3>Utilities.cpp</h3>
<hr/>
<div class = "indent">
<h4>Dependencies:

<ul style="list - style - type:disc">
<li><a href="Utilities.cpp.htm">Utilities.cpp</a></li>
<li><a href="Utilities.cpp.htm">Utilities.cpp</a></li>
<li><a href="XmlDocument.cpp.htm">XmlDocument.cpp</a></li>
<li><a href="Utilities.h.htm">Utilities.h</a></li>
<li><a href="xmlElementParts.h.htm">xmlElementParts.h</a></li>
<li><a href="Test1.cpp.htm">Test1.cpp</a></li>
<li><a href="Test2.cpp.htm">Test2.cpp</a></li>
<li><a href="Tokenizer.cpp.htm">Tokenizer.cpp</a></li>
</ul>
</div>
<hr/>
<pre>
///////////////////////////////////////////////////////////////////////
// Utilities.cpp - small, generally usefule, helper classes          //
// ver 1.2                                                           //
// Language:    C++, Visual Studio 2015                              //
// Application: Most Projects, CSE687 - Object Oriented Design       //
// Author:      Jim Fawcett, Syracuse University, CST 4-187          //
//              jfawcett@twcny.rr.com                                //
///////////////////////////////////////////////////////////////////////

#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include "Utilities.h"

using namespace Utilities;

std::function&lt;void(const std::string&)&gt; Title =
  [](auto src) { StringHelper::Title(src, '='); };

std::function&lt;void(const std::string&)&gt; title =
  [](auto src) { StringHelper::Title(src, '-'); };

void StringHelper::title(const std::string& src)
{
<button id="but50" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but50_div">
  std::cout &lt;&lt; "\n  " &lt;&lt; src;
  std::cout &lt;&lt; "\n " &lt;&lt; std::string(src.size() + 2, '-');
}
</div>
void StringHelper::Title(const std::string& src, char underline)
{
<button id="but51" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but51_div">
  std::cout &lt;&lt; "\n  " &lt;&lt; src;
  std::cout &lt;&lt; "\n " &lt;&lt; std::string(src.size() + 2, underline);
}
</div>
std::vector&lt;std::string&gt; StringHelper::split(const std::string& src)
{
<button id="but52" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but52_div">
  std::vector&lt;std::string&gt; accum;
  std::string temp;
  size_t index = 0;
  do
  {
    while ((isspace(src[index]) || src[index] == ',') && src[index] != '\n')
    {
      ++index;
      if (temp.size() &gt; 0)
      {
        accum.push_back(temp);
        temp.clear();
      }
    }
    if(src[index] != '\0')
      temp += src[index];
  } while (index++ &lt; src.size());
  if(temp.size() &gt; 0)
    accum.push_back(temp);
  return accum;
}
</div>
void Utilities::putline()
{
<button id="but53" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but53_div">
  std::cout &lt;&lt; "\n";
}
</div>
#ifdef TEST_UTILITIES

int main()
{
<button id="but54" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but54_div">
  Title("Testing Utilities Package");
  putline();

  title("test StringHelper::split(std::string)");

  std::string test = "a, \n, bc, de, efg, i, j k lm nopq rst";
  std::cout &lt;&lt; "\n  test string = " &lt;&lt; test;
  
  std::vector&lt;std::string&gt; result = StringHelper::split(test);
  
  std::cout &lt;&lt; "\n";
  for (auto item : result)
  {
    if (item == "\n")
      std::cout &lt;&lt; "\n  " &lt;&lt; "newline";
    else
      std::cout &lt;&lt; "\n  " &lt;&lt; item;
  }
  std::cout &lt;&lt; "\n";

  title("test std::string Converter&lt;T&gt;::toString(T)");

  std::string conv1 = Converter&lt;double&gt;::toString(3.1415927);
  std::string conv2 = Converter&lt;int&gt;::toString(73);
  std::string conv3 = Converter&lt;std::string&gt;::toString("a_test_string plus more");

  std::cout &lt;&lt; "\n  Converting from values to strings: ";
  std::cout &lt;&lt; conv1 &lt;&lt; ", " &lt;&lt; conv2 &lt;&lt; ", " &lt;&lt; conv3;
  putline();

  title("test T Converter&lt;T&gt;::toValue(std::string)");

  std::cout &lt;&lt; "\n  Converting from strings to values: ";
  std::cout &lt;&lt; Converter&lt;double&gt;::toValue(conv1) &lt;&lt; ", ";
  std::cout &lt;&lt; Converter&lt;int&gt;::toValue(conv2) &lt;&lt; ", ";
  std::cout &lt;&lt; Converter&lt;std::string&gt;::toValue(conv3);

  std::cout &lt;&lt; "\n\n";
  return 0;
}
</div>#endif
</pre>
</body>
</html>