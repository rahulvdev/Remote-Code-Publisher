<html>
<head>
<link rel="stylesheet" type="text/css" href="..\CSSfiles\CSSstart.css">
<script src="..\JavaScript\JSFile.js">
</script>
</head>
<body>
<pre>
 !----------------------------------------------------------------------------
Tokenizer.cpp.htm - Help file for Project #3
Published 19 Mar 2017
Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017


Note:
-Markup characters in the text part, enclosed in &lt;pre&gt;...&lt;/pre&gt; have to be
replaced with escape sequences, e.g., < becomes &lt and > becomes &gt
-Be careful that you don't replace genuine markup characters with escape
sequences, e.g., everything outside of the &lt;pre&gt;...&lt;/pre&gt; section.
----------------------------------------------------------------------------->
 </pre>
<h3>Tokenizer.cpp</h3>
<hr/>
<div class = "indent">
<h4>Dependencies:

<ul style="list - style - type:disc">
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
<li><a href="Tokenizer.cpp.htm">Tokenizer.cpp</a></li>
<li><a href="xmlElementParts.h.htm">xmlElementParts.h</a></li>
<li><a href="Utilities.cpp.htm">Utilities.cpp</a></li>
<li><a href="XmlParser.h.htm">XmlParser.h</a></li>
<li><a href="XmlDocument.cpp.htm">XmlDocument.cpp</a></li>
</ul>
</div>
<hr/>
<pre>
/////////////////////////////////////////////////////////////////////
//  Tokenizer.cpp - Reads words from a file                        //
//  ver 1.9                                                        //
//                                                                 //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Dell Precision T7400, Vista Ultimate SP1        //
//  Application:   Prototype for CSE687 Pr1, Sp09                  //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;cctype&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;assert.h&gt;
#include "Tokenizer.h"

//----&lt; constructor may be called with no argument &gt;-----------

Toker::Toker(const std::string& src, bool isFile) 
     : prevprevChar(0), prevChar(0), currChar(0), nextChar(0),
       doReturnComments(false), numLines(0), braceCount(0), pIn(0),
       _state(default_state)
{
<button id="but25" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but25_div">
  if(src.length() &gt; 0)
  {
    if(!attach(src, isFile))
    {
      std::string temp = std::string("can't open ") + src;
      throw std::exception(temp.c_str());
    }
  }
  scTok = "()[]{};.\n";
  if(_mode == xml)
    scTok = "&lt;&gt;!" + scTok;
}
</div>//----&lt; destructor &gt;-------------------------------------------

Toker::~Toker()
{
<button id="but26" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but26_div">
  if(pIn)
  {
    pIn-&gt;clear();
    std::ifstream* pFs = dynamic_cast&lt;std::ifstream*&gt;(pIn);
    if(pFs)
    {
      pFs-&gt;close();
    }
    delete pIn;
  }
}
</div>//----&lt; set mode of tokenizing, e.g., code or xml &gt;------------

void Toker::setMode(Toker::mode md)
<button id="but27" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but27_div">
{ 
  _mode = md; 
  scTok = "()[]{};.\n";
  if(_mode == xml)
    scTok = "&lt;&gt;!" + scTok;
}
</div>//----&lt; set mode of tokenizing, e.g., code or xml &gt;------------

void Toker::setSingleCharTokens(std::string tokChars)
<button id="but28" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but28_div">
{ 
  _mode = custom; 
  scTok = tokChars;
}
</div>//----&lt; attach tokenizer to a source file or string &gt;----------

bool Toker::attach(const std::string& name, bool srcIsFile)
{
<button id="but29" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but29_div">
  if(pIn && srcIsFile)
  {
    pIn-&gt;clear();
    std::ifstream* pFs = dynamic_cast&lt;std::ifstream*&gt;(pIn);
    if(pFs)
    {
      pFs-&gt;close();
    }
    delete pIn;
  }
  if(srcIsFile)
    pIn = new std::ifstream(name.c_str());
  else
    pIn = new std::istringstream(name.c_str());
  return pIn-&gt;good();
}
</div>//----&lt; peek function that works with multiple putbacks &gt;------

int Toker::peek()
{
<button id="but30" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but30_div">
  if(putbacks.size() &gt; 0)
    return putbacks[putbacks.size()-1];
  else
    return pIn-&gt;peek();

}
</div>//----&lt; multiple putBack that won't break peek &gt;---------------

void Toker::putback(int ch)
{
<button id="but31" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but31_div">
  putbacks.push_back(ch);
  nextChar = ch;
  currChar = prevChar;
  prevChar = prevprevChar;
}
</div>//----&lt; get consistent with peek and putback &gt;-----------------

int Toker::get()
{
<button id="but32" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but32_div">
  if(putbacks.size() &gt; 0)
  {
    char ch = putbacks.front();
    putbacks.pop_back();
    return ch;
  }
  return pIn-&gt;get();
}
</div>//
//----&lt; extract character from attached stream &gt;---------------

bool Toker::getChar()
{
<button id="but33" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but33_div">
  char oldNext = nextChar;
  prevprevChar = prevChar;
  prevChar = currChar;
  currChar = this-&gt;get();
  nextChar = this-&gt;peek();
  _ASSERT(currChar == oldNext || oldNext == 0);
  if(currChar == '\n')
    ++numLines;
  if(currChar == '{' && _state == default_state)
    ++braceCount;
  if(currChar == '}' && _state == default_state)
    --braceCount;
  return !pIn-&gt;eof();
}
</div>//----&lt; is this char a single char token? &gt;--------------------

bool Toker::isSingleCharTok(char ch)
{
<button id="but34" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but34_div">
  if(scTok.find(ch) &lt; scTok.length())
    return true;
  return false;
}
</div>//----&lt; remove contiguous white space except for newline &gt;-----

void Toker::stripWhiteSpace()
{
<button id="but35" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but35_div">
  if(nextChar == '\n')
    return;
  while(isspace(nextChar) && nextChar != '\n')
  {
    getChar();
  }
}
</div>//----&lt; is this an indentifier character? &gt;--------------------

bool Toker::isIdentifierChar(char ch)
{
<button id="but36" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but36_div">
  if(isalpha(ch) || ch == '_' || isdigit(ch))
    return true;
  return false;
}
</div>//----&lt; is this the end of a token? &gt;--------------------------

bool Toker::isTokEnd()
{
<button id="but37" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but37_div">
  if(isspace(nextChar))
    return true;
  if(isSingleCharTok(nextChar) || isSingleCharTok(currChar))
    return true;
  if(isIdentifierChar(currChar) && !isIdentifierChar(nextChar))
    return true;
  if(!isIdentifierChar(currChar) && isIdentifierChar(nextChar))
    return true;
  if(isFileEnd())
    return true;
  return false;
}
</div>//----&lt; is this the beginning of a comment? &gt;------------------

bool Toker::isBeginComment()
{
<button id="but38" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but38_div">
  if(prevChar != '\\' && currChar == '/' && nextChar == '*')
  {
    aCppComment = false;
    return true;
  }
  if(prevChar != '\\' && currChar == '/' && nextChar == '/')
  {
    aCppComment = true;
    return true;
  }
  return false;
}
</div>//----&lt; is this the end of a comment? &gt;------------------------

bool Toker::isEndComment()
{
<button id="but39" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but39_div">
  if(aCppComment && currChar != '\\' && nextChar == '\n')
      return true;
  if(!aCppComment && prevChar != '\\' && currChar == '*' && nextChar == '/')
    return true;
  return false;
}
</div>//----&lt; return comment as a token &gt;----------------------------

std::string Toker::eatComment()
{
<button id="but40" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but40_div">
  _state = comment_state;
  std::string tok(1,currChar);
  while(!isEndComment() && pIn-&gt;good())
  {
    getChar();
    tok.append(1,currChar);
  }

  if(!aCppComment)
  {
    getChar();
    tok.append(1,currChar);
  }
  _state = default_state;
  return tok;
}
</div>//----&lt; is this the beginning of a quote? &gt;--------------------

bool Toker::isBeginQuote()
{
<button id="but41" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but41_div">
  if(prevChar != '\\' && currChar == '\'')
  {
    aSingleQuote = true;
    return true;
  }
  if(prevChar != '\\' && currChar == '\"')
  {
    aSingleQuote = false;
    return true;
  }
  return false;
}
</div>//----&lt; is this the end of quote? &gt;----------------------------

bool Toker::isEndQuote()
{
<button id="but42" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but42_div">
  if(prevChar =='\\' || currChar != '\\')
  {
    if(aSingleQuote && nextChar == '\'')
      return true;
    if(!aSingleQuote && nextChar == '\"')
      return true;
  }
  return false;
}
</div>//----&lt; return single or double quote as token &gt;---------------

std::string Toker::eatQuote()
{
<button id="but43" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but43_div">
  _state = quote_state;
  std::string tok(1,currChar);
  while(!isEndQuote())
  {
    if(!pIn-&gt;good())
      throw std::exception("missing end of quote");
    getChar();
    tok.append(1,currChar);
  }
  getChar();
  tok.append(1,currChar);
  _state = default_state;
  return tok;
}
</div>//----&lt; read token from attached file &gt;------------------------

std::string Toker::getTok()
{
<button id="but44" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but44_div">
  std::string tok = "";
  stripWhiteSpace();
  if(isSingleCharTok(nextChar))
  {
    getChar();
    tok.append(1,currChar);
    return tok;
  }
  do
  {
    if(isFileEnd())
      return tok;

    getChar();
    if(isBeginComment())
    {
      if(tok.length() &gt; 0)
      {
        this-&gt;putback(currChar);
        return tok;
      }
      tok = eatComment();
      if(doReturnComments)
        return tok;
      else
      {
        tok = "";
        continue;
      }
    }
    if(isBeginQuote())
    {
      if(tok.length() &gt; 0)
      {
        this-&gt;putback(currChar);
        return tok;
      }
      tok = eatQuote();
      return tok;
    }
    if(!isspace(currChar))
      tok.append(1,currChar);
  }  while(!isTokEnd() || tok.length() == 0);
  return tok;
}
</div>//----&lt; test stub &gt;--------------------------------------------

#ifdef TEST_TOKENIZER

int main(int argc, char* argv[])
{
<button id="but45" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but45_div">
  std::cout &lt;&lt; "\n  Testing Tokenizer class\n "
            &lt;&lt; std::string(25,'=') &lt;&lt; std::endl;
  std::cout
    &lt;&lt; "\n  Note that comments and quotes are returned as single tokens\n\n";

  // collecting tokens from a string

  Toker t_fromStr("tokens from a string: -&gt; int x; /* a comment */", false);
  std::string tok;
  do
  {
    tok = t_fromStr.getTok();
    std::cout &lt;&lt; "  " &lt;&lt; tok;
  } while(tok != "");
  std::cout &lt;&lt; "\n\n";

  // collecting tokens from files, named on the command line

  if(argc &lt; 2)
  {
    std::cout 
      &lt;&lt; "\n  please enter name of file to process on command line\n\n";
    return 1;
  }

  for(int i=1; i&lt;argc; ++i)
  {
    std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];
    std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]),'-') &lt;&lt; "\n";

    try
    {
      Toker t;
      t.setMode(Toker::xml);        // comment out to show tokenizing for code
//    t.setSingleCharTokens("&lt;&gt;");  // will return same results as above for XML

      if(!t.attach(argv[i]))
      {
        std::cout &lt;&lt; "\n    can't open file " &lt;&lt; argv[i] &lt;&lt; "\n\n";
        continue;
      }
      t.returnComments();  // remove this statement to discard comment tokens
      std::string temp;
      do
      {
        temp = t.getTok();
        std::cout &lt;&lt; "  ln: " &lt;&lt; t.lines() &lt;&lt; ", br lev: "
          &lt;&lt; t.braceLevel() &lt;&lt; ", tok size: " &lt;&lt; std::setw(3) &lt;&lt; temp.length() &lt;&lt; " -- ";
        if(temp != "\n")
          std::cout &lt;&lt; temp &lt;&lt; std::endl;
        else
          std::cout &lt;&lt; "newline\n";
      } while(temp != "");
    }
    catch(std::exception& ex)
    {
      std::cout &lt;&lt; "  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    }
  }
}
</div>
#endif
</pre>
</body>
</html>