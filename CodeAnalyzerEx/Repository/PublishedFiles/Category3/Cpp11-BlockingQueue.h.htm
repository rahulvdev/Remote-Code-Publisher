<html>
<head>
<link rel="stylesheet" type="text/css" href="..\CSSfiles\CSSstart.css">
<script src="..\JavaScript\JSFile.js">
</script>
</head>
<body>
<pre>
 !----------------------------------------------------------------------------
Cpp11-BlockingQueue.h.htm - Help file for Project #3
Published 19 Mar 2017
Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017


Note:
-Markup characters in the text part, enclosed in &lt;pre&gt;...&lt;/pre&gt; have to be
replaced with escape sequences, e.g., < becomes &lt and > becomes &gt
-Be careful that you don't replace genuine markup characters with escape
sequences, e.g., everything outside of the &lt;pre&gt;...&lt;/pre&gt; section.
----------------------------------------------------------------------------->
 </pre>
<h3>Cpp11-BlockingQueue.h</h3>
<hr/>
<div class = "indent">
<h4>Dependencies:

<ul style="list - style - type:disc">
<li><a href="Cpp11-BlockingQueue.h.htm">Cpp11-BlockingQueue.h</a></li>
<li><a href="Cpp11-BlockingQueue.h.htm">Cpp11-BlockingQueue.h</a></li>
<li><a href="Cpp11-BlockingQueue.h.htm">Cpp11-BlockingQueue.h</a></li>
<li><a href="Utilities.cpp.htm">Utilities.cpp</a></li>
<li><a href="XmlDocument.cpp.htm">XmlDocument.cpp</a></li>
</ul>
</div>
<hr/>
<pre>
#ifndef CPP11_BLOCKINGQUEUE_H
#define CPP11_BLOCKINGQUEUE_H
#pragma warning(disable:4221)
///////////////////////////////////////////////////////////////
// Cpp11-BlockingQueue.h - Thread-safe Blocking Queue        //
// ver 1.4                                                   //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2015 //
///////////////////////////////////////////////////////////////
/*
 * Package Operations:
 * -------------------
 * This package contains one thread-safe class: BlockingQueue&lt;T&gt;.
 * Its purpose is to support sending messages between threads.
 * It is implemented using C++11 threading constructs including 
 * std::condition_variable and std::mutex.  The underlying storage
 * is provided by the non-thread-safe std::queue&lt;T&gt;.
 *
 * Required Files:
 * ---------------
 * Cpp11-BlockingQueue.h
 *
 * Build Process:
 * --------------
 * devenv Cpp11-BlockingQueue.sln /rebuild debug
 *
 * Maintenance History:
 * --------------------
 * ver 1.4 : 29 Jul 2016
 * - wrapped with namespace Async
 * ver 1.3 : 04 Mar 2016
 * - changed behavior of front() to throw exception
 *   on empty queue.
 * - added comment about std::unique_lock in deQ()
 * ver 1.2 : 27 Feb 2016
 * - added front();
 * - added move ctor and move assignment
 * - deleted copy ctor and copy assignment
 * ver 1.1 : 26 Jan 2015
 * - added copy constructor and assignment operator
 * ver 1.0 : 03 Mar 2014
 * - first release
 *
 */

#include &lt;condition_variable&gt;
#include &lt;mutex&gt;
#include &lt;thread&gt;
#include &lt;queue&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

namespace Async
{
  template &lt;typename T&gt;
  class BlockingQueue {
<button id="but0" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but0_div">
  public:
    BlockingQueue() {}
    BlockingQueue(BlockingQueue&lt;T&gt;&& bq);
    BlockingQueue&lt;T&gt;& operator=(BlockingQueue&lt;T&gt;&& bq);
    BlockingQueue(const BlockingQueue&lt;T&gt;&) = delete;
    BlockingQueue&lt;T&gt;& operator=(const BlockingQueue&lt;T&gt;&) = delete;
    T deQ();
    void enQ(const T& t);
    T& front();
    void clear();
    size_t size();
  private:
    std::queue&lt;T&gt; q_;
    std::mutex mtx_;
    std::condition_variable cv_;
  };
</div>  //----&lt; move constructor &gt;---------------------------------------------

  template&lt;typename T&gt;
  BlockingQueue&lt;T&gt;::BlockingQueue(BlockingQueue&lt;T&gt;&& bq) // need to lock so can't initialize
  {
<button id="but1" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but1_div">
    std::lock_guard&lt;std::mutex&gt; l(mtx_);
    q_ = bq.q_;
    while (bq.q_.size() &gt; 0)  // clear bq
      bq.q_.pop();
    /* can't copy  or move mutex or condition variable, so use default members */
  }
</div>  //----&lt; move assignment &gt;----------------------------------------------

  template&lt;typename T&gt;
  BlockingQueue&lt;T&gt;& BlockingQueue&lt;T&gt;::operator=(BlockingQueue&lt;T&gt;&& bq)
  {
<button id="but2" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but2_div">
    if (this == &bq) return *this;
    std::lock_guard&lt;std::mutex&gt; l(mtx_);
    q_ = bq.q_;
    while (bq.q_.size() &gt; 0)  // clear bq
      bq.q_.pop();
    /* can't move assign mutex or condition variable so use target's */
    return *this;
  }
</div>  //----&lt; remove element from front of queue &gt;---------------------------

  template&lt;typename T&gt;
  T BlockingQueue&lt;T&gt;::deQ()
  {
<button id="but3" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but3_div">
    std::unique_lock&lt;std::mutex&gt; l(mtx_);
    /*
       This lock type is required for use with condition variables.
       The operating system needs to lock and unlock the mutex:
       - when wait is called, below, the OS suspends waiting thread
         and releases lock.
       - when notify is called in enQ() the OS relocks the mutex,
         resumes the waiting thread and sets the condition variable to
         signaled state.
       std::lock_quard does not have public lock and unlock functions.
     */
    if (q_.size() &gt; 0)
    {
      T temp = q_.front();
      q_.pop();
      return temp;
    }
    // may have spurious returns so loop on !condition

    while (q_.size() == 0)
      cv_.wait(l, [this]() { return q_.size() &gt; 0; });
    T temp = q_.front();
    q_.pop();
    return temp;
  }
</div>  //----&lt; push element onto back of queue &gt;------------------------------

  template&lt;typename T&gt;
  void BlockingQueue&lt;T&gt;::enQ(const T& t)
  {
<button id="but4" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but4_div">
    {
      std::unique_lock&lt;std::mutex&gt; l(mtx_);
      q_.push(t);
    }
    cv_.notify_one();
  }
</div>  //----&lt; peek at next item to be popped &gt;-------------------------------

  template &lt;typename T&gt;
  T& BlockingQueue&lt;T&gt;::front()
  {
<button id="but5" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but5_div">
    std::lock_guard&lt;std::mutex&gt; l(mtx_);
    if (q_.size() &gt; 0)
      return q_.front();
    throw std::exception("attempt to deQue empty queue");
  }
</div>  //----&lt; remove all elements from queue &gt;-------------------------------

  template &lt;typename T&gt;
  void BlockingQueue&lt;T&gt;::clear()
  {
<button id="but6" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but6_div">
    std::lock_guard&lt;std::mutex&gt; l(mtx_);
    while (q_.size() &gt; 0)
      q_.pop();
  }
</div>  //----&lt; return number of elements in queue &gt;---------------------------

  template&lt;typename T&gt;
  size_t BlockingQueue&lt;T&gt;::size()
  {
<button id="but7" type="button" onclick="triggerMethod(this)">+</button>
<div class="noShow" id="but7_div">
    std::lock_guard&lt;std::mutex&gt; l(mtx_);
    return q_.size();
  }
</div>}
#endif
</pre>
</body>
</html>